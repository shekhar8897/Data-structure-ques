Quick Sort Code
Send Feedback
Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 1000
Sample Input:
6 
2 6 8 5 4 3
Sample Output:
2 3 4 5 6 8



#include<iostream>
#include "Solution.h"
using namespace std;


int main(){
    int n;
    cin >> n;
  
    int *input = new int[n];
    
    for(int i = 0; i < n; i++) {
        cin >> input[i];
    }
    
    quickSort(input, n);
    for(int i = 0; i < n; i++) {
        cout << input[i] << " ";
    }
    
    delete [] input;

}



void swap(int* p, int* q)  
{  
    int temp = *p;  
    *p = *q;  
    *q = temp;  
}  
int partition(int input[],int low,int high)
{
    int pivot=input[high];
    int i=low-1;
    
    for(int j=low;j<high;j++)
    {
        if(input[j]<pivot)
        {
            i++;
            swap(&input[i], &input[j]);  
        }
    }
    swap(&input[i + 1], &input[high]);  
    return (i + 1);  
    
}
void helper(int input[],int low,int high)
{
    if(low<high)
    {
        int pi=partition(input,low,high);
    
    
        helper(input,low,pi-1);
        helper(input,pi+1,high);
    }
}
void quickSort(int input[], int size) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Change in the given array itself.
     Taking input and printing output is handled automatically.
  */
    int low=0;
    int high=size-1;
    helper(input,low,high);

}
